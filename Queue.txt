from node import Node

class Queue:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def enqueue(self, value, importance):
        item_to_add = Node(value, importance)
        # print("Adding " + str(item_to_add.get_value()) + " to the queue.")
        if self.is_empty():
            self.head = item_to_add
            self.tail = item_to_add
        else:
            self.tail.set_next_node(item_to_add)
            self.tail = item_to_add
        self.size += 1

    def dequeue(self):
        if self.get_size() > 0:
            item_to_remove = self.head
            # print("Removing " + str(item_to_remove.get_value()) + " from the queue.")
            if self.get_size() == 1:
                self.head = None
                self.tail = None
            else:
                self.head = self.head.get_next_node()
            self.size -= 1
            return item_to_remove.get_value(), item_to_remove.get_importance()
        else:
            print("This queue is empty.\n")
    
    def peek(self):
        if self.size > 0:
            return self.head.get_value(), self.head.get_importance()
        else:
            print("This queue is empty.\n")

    def get_size(self):
        return self.size
    
    # def has_space(self):
    #     if self.max_size == None:
    #         return True
    #     else:
    #         return self.max_size > self.get_size

    def is_empty(self):
        return self.size == 0

    def print_items(self):
        pointer = self.head
        print_list = []
        importance_list = []
        while (pointer):
            print_list.append(pointer.get_value())
            importance_list.append(pointer.get_importance())
            pointer = pointer.get_next_node()
        for task in range(len(print_list)):
            print("Position {0} has task: {1}, importance: {2}.".format(task, print_list[task],importance_list[task]))
    
    def move_to_head(self):
        for value in range(self.size-1):
            self.enqueue(self.head.get_value(), self.head.get_importance())
            self.dequeue()
        